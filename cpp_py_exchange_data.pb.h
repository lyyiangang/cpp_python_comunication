// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cpp_py_exchange_data.proto

#ifndef PROTOBUF_INCLUDED_cpp_5fpy_5fexchange_5fdata_2eproto
#define PROTOBUF_INCLUDED_cpp_5fpy_5fexchange_5fdata_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_cpp_5fpy_5fexchange_5fdata_2eproto 

namespace protobuf_cpp_5fpy_5fexchange_5fdata_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_cpp_5fpy_5fexchange_5fdata_2eproto
namespace yy {
class MsgToClient;
class MsgToClientDefaultTypeInternal;
extern MsgToClientDefaultTypeInternal _MsgToClient_default_instance_;
class MsgToServer;
class MsgToServerDefaultTypeInternal;
extern MsgToServerDefaultTypeInternal _MsgToServer_default_instance_;
}  // namespace yy
namespace google {
namespace protobuf {
template<> ::yy::MsgToClient* Arena::CreateMaybeMessage<::yy::MsgToClient>(Arena*);
template<> ::yy::MsgToServer* Arena::CreateMaybeMessage<::yy::MsgToServer>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace yy {

enum MsgToServer_Mode {
  MsgToServer_Mode_EXIT = 0,
  MsgToServer_Mode_RUN = 1,
  MsgToServer_Mode_MsgToServer_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MsgToServer_Mode_MsgToServer_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MsgToServer_Mode_IsValid(int value);
const MsgToServer_Mode MsgToServer_Mode_Mode_MIN = MsgToServer_Mode_EXIT;
const MsgToServer_Mode MsgToServer_Mode_Mode_MAX = MsgToServer_Mode_RUN;
const int MsgToServer_Mode_Mode_ARRAYSIZE = MsgToServer_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgToServer_Mode_descriptor();
inline const ::std::string& MsgToServer_Mode_Name(MsgToServer_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgToServer_Mode_descriptor(), value);
}
inline bool MsgToServer_Mode_Parse(
    const ::std::string& name, MsgToServer_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgToServer_Mode>(
    MsgToServer_Mode_descriptor(), name, value);
}
// ===================================================================

class MsgToServer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:yy.MsgToServer) */ {
 public:
  MsgToServer();
  virtual ~MsgToServer();

  MsgToServer(const MsgToServer& from);

  inline MsgToServer& operator=(const MsgToServer& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgToServer(MsgToServer&& from) noexcept
    : MsgToServer() {
    *this = ::std::move(from);
  }

  inline MsgToServer& operator=(MsgToServer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgToServer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgToServer* internal_default_instance() {
    return reinterpret_cast<const MsgToServer*>(
               &_MsgToServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MsgToServer* other);
  friend void swap(MsgToServer& a, MsgToServer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgToServer* New() const final {
    return CreateMaybeMessage<MsgToServer>(NULL);
  }

  MsgToServer* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgToServer>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgToServer& from);
  void MergeFrom(const MsgToServer& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgToServer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MsgToServer_Mode Mode;
  static const Mode EXIT =
    MsgToServer_Mode_EXIT;
  static const Mode RUN =
    MsgToServer_Mode_RUN;
  static inline bool Mode_IsValid(int value) {
    return MsgToServer_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    MsgToServer_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    MsgToServer_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    MsgToServer_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return MsgToServer_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return MsgToServer_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return MsgToServer_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated bytes imgBuffer = 4;
  int imgbuffer_size() const;
  void clear_imgbuffer();
  static const int kImgBufferFieldNumber = 4;
  const ::std::string& imgbuffer(int index) const;
  ::std::string* mutable_imgbuffer(int index);
  void set_imgbuffer(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_imgbuffer(int index, ::std::string&& value);
  #endif
  void set_imgbuffer(int index, const char* value);
  void set_imgbuffer(int index, const void* value, size_t size);
  ::std::string* add_imgbuffer();
  void add_imgbuffer(const ::std::string& value);
  #if LANG_CXX11
  void add_imgbuffer(::std::string&& value);
  #endif
  void add_imgbuffer(const char* value);
  void add_imgbuffer(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& imgbuffer() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_imgbuffer();

  // .yy.MsgToServer.Mode msgMode = 1;
  void clear_msgmode();
  static const int kMsgModeFieldNumber = 1;
  ::yy::MsgToServer_Mode msgmode() const;
  void set_msgmode(::yy::MsgToServer_Mode value);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:yy.MsgToServer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> imgbuffer_;
  int msgmode_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cpp_5fpy_5fexchange_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MsgToClient : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:yy.MsgToClient) */ {
 public:
  MsgToClient();
  virtual ~MsgToClient();

  MsgToClient(const MsgToClient& from);

  inline MsgToClient& operator=(const MsgToClient& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MsgToClient(MsgToClient&& from) noexcept
    : MsgToClient() {
    *this = ::std::move(from);
  }

  inline MsgToClient& operator=(MsgToClient&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgToClient& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MsgToClient* internal_default_instance() {
    return reinterpret_cast<const MsgToClient*>(
               &_MsgToClient_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MsgToClient* other);
  friend void swap(MsgToClient& a, MsgToClient& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MsgToClient* New() const final {
    return CreateMaybeMessage<MsgToClient>(NULL);
  }

  MsgToClient* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MsgToClient>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MsgToClient& from);
  void MergeFrom(const MsgToClient& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgToClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string actionType = 3;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 3;
  const ::std::string& actiontype() const;
  void set_actiontype(const ::std::string& value);
  #if LANG_CXX11
  void set_actiontype(::std::string&& value);
  #endif
  void set_actiontype(const char* value);
  void set_actiontype(const char* value, size_t size);
  ::std::string* mutable_actiontype();
  ::std::string* release_actiontype();
  void set_allocated_actiontype(::std::string* actiontype);

  // int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:yy.MsgToClient)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr actiontype_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_cpp_5fpy_5fexchange_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MsgToServer

// .yy.MsgToServer.Mode msgMode = 1;
inline void MsgToServer::clear_msgmode() {
  msgmode_ = 0;
}
inline ::yy::MsgToServer_Mode MsgToServer::msgmode() const {
  // @@protoc_insertion_point(field_get:yy.MsgToServer.msgMode)
  return static_cast< ::yy::MsgToServer_Mode >(msgmode_);
}
inline void MsgToServer::set_msgmode(::yy::MsgToServer_Mode value) {
  
  msgmode_ = value;
  // @@protoc_insertion_point(field_set:yy.MsgToServer.msgMode)
}

// int32 width = 2;
inline void MsgToServer::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 MsgToServer::width() const {
  // @@protoc_insertion_point(field_get:yy.MsgToServer.width)
  return width_;
}
inline void MsgToServer::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:yy.MsgToServer.width)
}

// int32 height = 3;
inline void MsgToServer::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 MsgToServer::height() const {
  // @@protoc_insertion_point(field_get:yy.MsgToServer.height)
  return height_;
}
inline void MsgToServer::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:yy.MsgToServer.height)
}

// repeated bytes imgBuffer = 4;
inline int MsgToServer::imgbuffer_size() const {
  return imgbuffer_.size();
}
inline void MsgToServer::clear_imgbuffer() {
  imgbuffer_.Clear();
}
inline const ::std::string& MsgToServer::imgbuffer(int index) const {
  // @@protoc_insertion_point(field_get:yy.MsgToServer.imgBuffer)
  return imgbuffer_.Get(index);
}
inline ::std::string* MsgToServer::mutable_imgbuffer(int index) {
  // @@protoc_insertion_point(field_mutable:yy.MsgToServer.imgBuffer)
  return imgbuffer_.Mutable(index);
}
inline void MsgToServer::set_imgbuffer(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:yy.MsgToServer.imgBuffer)
  imgbuffer_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void MsgToServer::set_imgbuffer(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:yy.MsgToServer.imgBuffer)
  imgbuffer_.Mutable(index)->assign(std::move(value));
}
#endif
inline void MsgToServer::set_imgbuffer(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  imgbuffer_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:yy.MsgToServer.imgBuffer)
}
inline void MsgToServer::set_imgbuffer(int index, const void* value, size_t size) {
  imgbuffer_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:yy.MsgToServer.imgBuffer)
}
inline ::std::string* MsgToServer::add_imgbuffer() {
  // @@protoc_insertion_point(field_add_mutable:yy.MsgToServer.imgBuffer)
  return imgbuffer_.Add();
}
inline void MsgToServer::add_imgbuffer(const ::std::string& value) {
  imgbuffer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:yy.MsgToServer.imgBuffer)
}
#if LANG_CXX11
inline void MsgToServer::add_imgbuffer(::std::string&& value) {
  imgbuffer_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:yy.MsgToServer.imgBuffer)
}
#endif
inline void MsgToServer::add_imgbuffer(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  imgbuffer_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:yy.MsgToServer.imgBuffer)
}
inline void MsgToServer::add_imgbuffer(const void* value, size_t size) {
  imgbuffer_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:yy.MsgToServer.imgBuffer)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MsgToServer::imgbuffer() const {
  // @@protoc_insertion_point(field_list:yy.MsgToServer.imgBuffer)
  return imgbuffer_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MsgToServer::mutable_imgbuffer() {
  // @@protoc_insertion_point(field_mutable_list:yy.MsgToServer.imgBuffer)
  return &imgbuffer_;
}

// -------------------------------------------------------------------

// MsgToClient

// int32 width = 1;
inline void MsgToClient::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 MsgToClient::width() const {
  // @@protoc_insertion_point(field_get:yy.MsgToClient.width)
  return width_;
}
inline void MsgToClient::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:yy.MsgToClient.width)
}

// int32 height = 2;
inline void MsgToClient::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 MsgToClient::height() const {
  // @@protoc_insertion_point(field_get:yy.MsgToClient.height)
  return height_;
}
inline void MsgToClient::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:yy.MsgToClient.height)
}

// string actionType = 3;
inline void MsgToClient::clear_actiontype() {
  actiontype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MsgToClient::actiontype() const {
  // @@protoc_insertion_point(field_get:yy.MsgToClient.actionType)
  return actiontype_.GetNoArena();
}
inline void MsgToClient::set_actiontype(const ::std::string& value) {
  
  actiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:yy.MsgToClient.actionType)
}
#if LANG_CXX11
inline void MsgToClient::set_actiontype(::std::string&& value) {
  
  actiontype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:yy.MsgToClient.actionType)
}
#endif
inline void MsgToClient::set_actiontype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  actiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:yy.MsgToClient.actionType)
}
inline void MsgToClient::set_actiontype(const char* value, size_t size) {
  
  actiontype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:yy.MsgToClient.actionType)
}
inline ::std::string* MsgToClient::mutable_actiontype() {
  
  // @@protoc_insertion_point(field_mutable:yy.MsgToClient.actionType)
  return actiontype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MsgToClient::release_actiontype() {
  // @@protoc_insertion_point(field_release:yy.MsgToClient.actionType)
  
  return actiontype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MsgToClient::set_allocated_actiontype(::std::string* actiontype) {
  if (actiontype != NULL) {
    
  } else {
    
  }
  actiontype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), actiontype);
  // @@protoc_insertion_point(field_set_allocated:yy.MsgToClient.actionType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace yy

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::yy::MsgToServer_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yy::MsgToServer_Mode>() {
  return ::yy::MsgToServer_Mode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_cpp_5fpy_5fexchange_5fdata_2eproto
